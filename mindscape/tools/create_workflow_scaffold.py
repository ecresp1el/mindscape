#!/usr/bin/env python
# NOTE: This script is located in tools/create_workflow_scaffold.py and is intended for developer use.
"""
🛠 MindScape Workflow Scaffold Generator

This script generates a new workflow module inside the `pipelines/` directory
using the MindScape modular workflow framework. It creates a new class that
inherits from `BaseWorkflow` and sets up boilerplate for configuration,
logging, and execution.

Usage (from project root):
    python tools/create_workflow_scaffold.py --name MyNewWorkflow

Options:
    --name WORKFLOW_NAME   Name of the workflow class and file (e.g., "CellRangerWorkflow")
    --force                Overwrite the existing workflow file if it already exists

Example:
    python tools/create_workflow_scaffold.py --name AnnotateClustersWorkflow

This will generate a new file at:
    mindscape/bioinformatics_workflow_engine/pipelines/annotate_clusters_workflow.py

And create a class:
    class AnnotateClustersWorkflow(BaseWorkflow):

Dependencies:
    - Must be run from the root of the MindScape project repo.
    - Assumes `BaseWorkflow` exists in `pipelines/base_workflow.py`.
"""
import argparse
import os
from pathlib import Path

TEMPLATE = '''# This file was auto-generated by create_workflow_scaffold.py
# Class: {class_name}
# File: {filename} (snake_case match required for registration)

from .base_workflow import BaseWorkflow

class {class_name}(BaseWorkflow):
    """
    {class_name} class that inherits from BaseWorkflow.
    Implements specific logic for the {class_name} pipeline.
    """

    def __init__(self, config_path, logger=None):
        super().__init__(config_path=config_path, logger=logger)
        self.workflow_name = "{class_name}"
        self.setup_paths()

    def run(self):
        """
        Execute the {class_name} workflow.
        """
        if not self.config.get("force_rerun", False) and self.is_already_completed():
            print(f"✅ Skipping {{self.workflow_name}}; already completed.")
            return

        self.log_start()

        # TODO: Add your workflow steps here
        # Example: self.step_one()
        #
        # No need to call self.mark_completed() — handled automatically by the base class logic.

        self.log_end()
'''

def to_snake_case(name):
    import re
    name = re.sub(r'(?<!^)(?=[A-Z])', '_', name).lower()
    return name

def main():
    parser = argparse.ArgumentParser(description="Generate a new MindScape workflow scaffold")
    parser.add_argument("--name", required=True, help="Name of the workflow class (e.g., MyNewWorkflow)")
    parser.add_argument("--force", action="store_true", help="Force overwrite if the workflow file already exists")
    args = parser.parse_args()
    force = args.force

    workflow_name = args.name
    class_name = workflow_name if workflow_name.endswith("Workflow") else workflow_name + "Workflow"
    filename = to_snake_case(class_name) + ".py"

    # Paths
    project_root = Path(__file__).resolve().parents[2]
    target_dir = project_root / "mindscape" / "bioinformatics_workflow_engine" / "pipelines"
    target_path = target_dir / filename

    if target_path.exists():
        if not force:
            print(f"⚠️  File already exists: {target_path}")
            print("❌ Aborting to avoid overwriting existing workflow code.")
            print("💡 Tip: Use the --force flag to overwrite it.")
            return
        else:
            print(f"⚠️  Overwriting existing workflow file: {target_path}")

    target_dir.mkdir(parents=True, exist_ok=True)
    with open(target_path, "w") as f:
        f.write(TEMPLATE.format(class_name=class_name, filename=filename))

    print("📂 Scaffold generation complete!")
    print(f"🔧 Workflow class: {class_name}")
    print(f"📄 Workflow file : {filename}")
    print(f"✅ Created workflow scaffold: {target_path}")
    print(f"ℹ️  Note: '{filename}' must match the snake_case of class name '{class_name}' for proper dynamic loading.")
    print("📌 Next steps:")
    print(" - Implement your workflow logic inside the class using the add_workflow_to_config.py script")
    print(" - Add the workflow to your config.yaml under 'workflows'")
    # explain it must be added manuallly to the run_workflows.py at the top of the file 
    print(" - Register the workflow class in run_workflows.py (if not already registered)")
    print(" - Commit the new file to GitHub")
    print(" - This developer tool lives in: tools/create_workflow_scaffold.py")
    print(" - Run this script from the root of the MindScape repo")

if __name__ == "__main__":
    main()