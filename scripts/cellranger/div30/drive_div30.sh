#!/usr/bin/env bash
set -euo pipefail
# Bash is set to exit if a command has a non-zero exit (- e stops run if script fails)
# -u results in a stop if variables are used but not defined
# -o stops errors from being hidden by printing the return code of the failed step
# This line is crucial to ensure the script is properly structured and run

# Simple driver for the DIV30 Cell Ranger run.
#
# Purpose
# - Provide a single, obvious entrypoint to run the DIV30 Cell Ranger workflow
#   in three modes: dry (plan), local (execute), and slurm (submit to scheduler).
# - Keep all logic in the existing scripts; this driver only wires them together.
#
# Modes
# - dry   – plan only (no execution). Uses Snakemake -n and skips ref existence.
# - local – run locally on the current node (requires snakemake + cellranger).
# - slurm – submit a portable job via sbatch (no #SBATCH lines in job body).
#
# Data flow
# - This script sources config_div30.sh to realize defaults, then:
#   - dry/local: calls create_project_cellranger_div30.sh directly
#   - slurm: calls submit_cellranger_div30.sh, which queues job_cellranger_div30.sh
# - The job script locates the wrapper via WRAPPER_PATH/SLURM_SUBMIT_DIR fallbacks.
#
# Notes
# - TEST_DIR defaults under /nfs/turbo/umms-parent/$USER/mindscape_div30/<timestamp>.
#   Set RUNSTAMP or TEST_DIR explicitly to control output location.
# - All env vars defined in config can be overridden before calling this driver.

usage() { # Define usage
  cat <<EOF # Assigns the following text (until EOF) to cat, which reads from standard input (printing this multi-line text), Note $0 is the name of the script
Usage: $0 {dry|local|slurm}

Env you can set (overrides config defaults):
  RUNSTAMP                Timestamp suffix for TEST_DIR (autogenerated)
  TEST_DIR                Working directory (defaults under /nfs/turbo/umms-parent)
  TURBO_CONFIG_SOURCE     Path to DIV30 config.csv
  PROBE_PATH              10x Flex probe-set CSV
  REF_GENOME              refdata-gex folder (or TURBO_REF_BASE + REF_SUBPATH)
  OUTPUT_ID               Cell Ranger --id (default: div30-reanalysis)
  CORES                   Local cores for Snakemake

Slurm-only env (passed through):
  ACCOUNT PARTITION QOS TIME CPUS MEM MAIL_USER JOB_NAME LOG_DIR

Examples:
  # Dry-run with defaults from config_div30.sh
  $0 dry

  # Real local run
  $0 local

  # Slurm submission (set your cluster options first)
  TIME=24:00:00 CPUS=32 MEM=128G ACCOUNT=parent0 $0 slurm
EOF
}

MODE="${1:-}" #First position $1 is assigned to MODE;No $1 results in - (empty string)
if [[ -z "$MODE" || "$MODE" == "-h" || "$MODE" == "--help" ]]; then
  usage; exit 0
fi
# Exits the script if MODE is empty (-z) or user asks for help (-h or -help)

DRIVER_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" # Constructs the name of the driver directory as an absolute path
ROOT_DIR="$( cd "$DRIVER_DIR/.." && pwd )" # Holds the directory before the current working directory (where all cellranger scripts are held)   # scripts/cellranger
SCRIPTS_DIR="$ROOT_DIR/scripts" # Stores path for cellranger scripts   # scripts/cellranger/scripts
SLURM_DIR="$ROOT_DIR/slurm"                            # scripts/cellranger/slurm # Stores path for cellranger slurm      
DRIVER_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" # Constructs the name of the driver directory
    
CONFIG_FILE="$SCRIPTS_DIR/config_div30.sh" # Path to config file (which is in cellranger/scripts)
WRAPPER="$SCRIPTS_DIR/create_project_cellranger_div30.sh" # Stores the path to the wrapper in cellranger/scripts
SUBMIT="$SLURM_DIR/submit_cellranger_div30.sh" # Stores slurm submission script in cellranger/slurm

[[ -f "$CONFIG_FILE" ]] || { echo "❌ Missing: $CONFIG_FILE" >&2; exit 1; }
[[ -f "$WRAPPER" ]]     || { echo "❌ Missing: $WRAPPER" >&2; exit 1; }
[[ -f "$SUBMIT" ]]      || { echo "❌ Missing: $SUBMIT"  >&2; exit 1; }
# Print error statements if these variables are not found

# Ensure RUNSTAMP is consistent across sourcing + wrapper
export RUNSTAMP=${RUNSTAMP:-$(date +%Y%m%d_%H%M%S)}
# Export sends variable to child processes/scripts called from the driver

# Source config to realize defaults (respect env overrides)
# Source pulls variables from the config file
source "$CONFIG_FILE"
# Export key vars so submit sees them (for logs and env propagation)
export TEST_DIR TURBO_CONFIG_SOURCE PROBE_PATH REF_GENOME TURBO_REF_BASE REF_SUBPATH OUTPUT_ID CORES SNAKEFILE
# Also export an absolute wrapper path so the job can find it from spool
export WRAPPER_PATH="$WRAPPER"

# Dynamic email for Slurm notifications (based on user)
# Priority: explicit MAIL_USER if provided; otherwise $USER@${DEFAULT_EMAIL_DOMAIN}
DEFAULT_EMAIL_DOMAIN=${DEFAULT_EMAIL_DOMAIN:-umich.edu}
if [[ -z "${MAIL_USER:-}" && -n "${USER:-}" ]]; then
  export MAIL_USER="${USER}@${DEFAULT_EMAIL_DOMAIN}"
fi

echo "🔧 Using configuration:"
echo "  TEST_DIR            : ${TEST_DIR}"
echo "  TURBO_CONFIG_SOURCE : ${TURBO_CONFIG_SOURCE}"
echo "  PROBE_PATH          : ${PROBE_PATH}"
echo "  REF_GENOME          : ${REF_GENOME:-${TURBO_REF_BASE}/${REF_SUBPATH}}"
echo "  OUTPUT_ID           : ${OUTPUT_ID}"
echo "  CORES               : ${CORES}"
echo "  MAIL_USER           : ${MAIL_USER:-<none>}"
# Specifications from config file

# Calls the wrapper script by each calling specification 
case "$MODE" in
  dry)
    echo "🧪 DRY-RUN: planning only"
    DRY_RUN=1 bash "$WRAPPER"
    ;;
  local)
    echo "🚀 LOCAL RUN: executing Snakemake/Cell Ranger"
    DRY_RUN=0 bash "$WRAPPER"
    ;;
  slurm)
    echo "📨 SLURM SUBMIT: submitting job via sbatch"
    # submit script already propagates env via --export=ALL
    SUBMIT_OUT=$(bash "$SUBMIT" 2>&1 || true) # Captures output and error and does not exit on error
    echo "$SUBMIT_OUT"
    JOB_ID=$(echo "$SUBMIT_OUT" | awk '/Submitted batch job/ {print $4}' | tail -n1)
    JOB_NAME_EFF=${JOB_NAME:-cellranger_multi_div30}
    LOG_DIR_EFF=${LOG_DIR:-"$TEST_DIR/logs"} # Directory of logs
    if [[ -n "$JOB_ID" ]]; then
      echo "📟 Job ID: $JOB_ID"
      echo "🧭 Monitor: squeue -j $JOB_ID"
      echo "📜 Logs:   tail -f $LOG_DIR_EFF/${JOB_NAME_EFF}_${JOB_ID}.out"
    else
      echo "⚠️ Could not parse Job ID from sbatch output above."
    fi
    ;;
  *)
    echo "❌ Unknown mode: $MODE" >&2
    usage
    exit 1
    ;;
esac
